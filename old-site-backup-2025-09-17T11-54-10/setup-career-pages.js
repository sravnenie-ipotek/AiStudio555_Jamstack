#!/usr/bin/env node

/**
 * Setup Career Pages - Creates tables and seeds initial data
 * Run this to set up Career Orientation and Career Center pages
 */

const { Client } = require('pg');

async function setupCareerPages() {
  if (!process.env.DATABASE_URL) {
    console.error('‚ùå DATABASE_URL not found. Please set it in your environment.');
    process.exit(1);
  }

  const client = new Client({
    connectionString: process.env.DATABASE_URL,
    ssl: { rejectUnauthorized: false }
  });

  try {
    await client.connect();
    console.log('‚úÖ Connected to PostgreSQL');

    // 1. Create Career Orientation Pages table
    console.log('üìä Creating career_orientation_pages table...');
    await client.query(`
      CREATE TABLE IF NOT EXISTS career_orientation_pages (
        id SERIAL PRIMARY KEY,
        locale VARCHAR(5) DEFAULT 'en',
        title VARCHAR(255),
        subtitle VARCHAR(500),
        description TEXT,
        hero_title VARCHAR(255),
        hero_subtitle VARCHAR(500),
        hero_description TEXT,
        published_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);

    // 2. Create Career Center Pages table
    console.log('üìä Creating career_center_pages table...');
    await client.query(`
      CREATE TABLE IF NOT EXISTS career_center_pages (
        id SERIAL PRIMARY KEY,
        locale VARCHAR(5) DEFAULT 'en',
        title VARCHAR(255),
        subtitle VARCHAR(500),
        description TEXT,
        hero_title VARCHAR(255),
        hero_subtitle VARCHAR(500),
        hero_description TEXT,
        published_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);

    // 3. Seed Career Orientation Pages
    console.log('üìã Seeding Career Orientation Pages...');
    const careerOrientationPages = [
      {
        locale: 'en',
        title: 'Career Orientation Program',
        subtitle: 'Find Your Perfect Tech Career Path',
        description: 'Our comprehensive career orientation program helps you discover the perfect technology career path aligned with your interests, skills, and goals.',
        heroTitle: 'Find Your Path in Tech',
        heroSubtitle: 'Discover Your Perfect Career Match',
        heroDescription: 'Our AI-powered career orientation helps you identify the right technology career path based on your skills, interests, and market demand.'
      },
      {
        locale: 'ru',
        title: '–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∫–∞—Ä—å–µ—Ä–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏',
        subtitle: '–ù–∞–π–¥–∏—Ç–µ —Å–≤–æ–π –∏–¥–µ–∞–ª—å–Ω—ã–π –ø—É—Ç—å –≤ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö',
        description: '–ù–∞—à–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∫–∞—Ä—å–µ—Ä–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –Ω–∞–π—Ç–∏ –∏–¥–µ–∞–ª—å–Ω—ã–π –∫–∞—Ä—å–µ—Ä–Ω—ã–π –ø—É—Ç—å –≤ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –≤–∞—à–∏–º –∏–Ω—Ç–µ—Ä–µ—Å–∞–º, –Ω–∞–≤—ã–∫–∞–º –∏ —Ü–µ–ª—è–º.',
        heroTitle: '–ù–∞–π–¥–∏—Ç–µ —Å–≤–æ–π –ø—É—Ç—å –≤ IT',
        heroSubtitle: '–û—Ç–∫—Ä–æ–π—Ç–µ –∏–¥–µ–∞–ª—å–Ω–æ–µ –∫–∞—Ä—å–µ—Ä–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ',
        heroDescription: '–ù–∞—à–∞ –∫–∞—Ä—å–µ—Ä–Ω–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ò–ò –ø–æ–º–æ–≥–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∫–∞—Ä—å–µ—Ä–Ω—ã–π –ø—É—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –Ω–∞–≤—ã–∫–æ–≤, –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –∏ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ —Å–ø—Ä–æ—Å–∞.'
      },
      {
        locale: 'he',
        title: '◊™◊ï◊õ◊†◊ô◊™ ◊î◊õ◊ï◊ï◊†◊î ◊û◊ß◊¶◊ï◊¢◊ô◊™',
        subtitle: '◊û◊¶◊ê ◊ê◊™ ◊û◊°◊ú◊ï◊ú ◊î◊ß◊®◊ô◊ô◊®◊î ◊î◊û◊ï◊©◊ú◊ù ◊©◊ú◊ö ◊ë◊ò◊õ◊†◊ï◊ú◊ï◊í◊ô◊î',
        description: '◊™◊ï◊õ◊†◊ô◊™ ◊î◊î◊õ◊ï◊ï◊†◊î ◊î◊û◊ß◊¶◊ï◊¢◊ô◊™ ◊î◊û◊ß◊ô◊§◊î ◊©◊ú◊†◊ï ◊¢◊ï◊ñ◊®◊™ ◊ú◊ö ◊ú◊í◊ú◊ï◊™ ◊ê◊™ ◊û◊°◊ú◊ï◊ú ◊î◊ß◊®◊ô◊ô◊®◊î ◊î◊ò◊õ◊†◊ï◊ú◊ï◊í◊ô ◊î◊û◊ï◊©◊ú◊ù ◊î◊û◊™◊ê◊ô◊ù ◊ú◊™◊ó◊ï◊û◊ô ◊î◊¢◊†◊ô◊ô◊ü, ◊î◊õ◊ô◊©◊ï◊®◊ô◊ù ◊ï◊î◊û◊ò◊®◊ï◊™ ◊©◊ú◊ö.',
        heroTitle: '◊û◊¶◊ê ◊ê◊™ ◊î◊ì◊®◊ö ◊©◊ú◊ö ◊ë◊î◊ô◊ô◊ò◊ß',
        heroSubtitle: '◊í◊ú◊î ◊ê◊™ ◊î◊î◊™◊ê◊û◊î ◊î◊ß◊®◊ô◊ô◊®◊î ◊î◊û◊ï◊©◊ú◊û◊™ ◊©◊ú◊ö',
        heroDescription: '◊î◊î◊õ◊ï◊ï◊†◊î ◊î◊û◊ß◊¶◊ï◊¢◊ô◊™ ◊î◊û◊ë◊ï◊°◊°◊™ ◊¢◊ú AI ◊©◊ú◊†◊ï ◊¢◊ï◊ñ◊®◊™ ◊ú◊ö ◊ú◊ñ◊î◊ï◊™ ◊ê◊™ ◊û◊°◊ú◊ï◊ú ◊î◊ß◊®◊ô◊ô◊®◊î ◊î◊ò◊õ◊†◊ï◊ú◊ï◊í◊ô ◊î◊†◊õ◊ï◊ü ◊¢◊ú ◊ë◊°◊ô◊° ◊î◊õ◊ô◊©◊ï◊®◊ô◊ù, ◊™◊ó◊ï◊û◊ô ◊î◊¢◊†◊ô◊ô◊ü ◊ï◊î◊ë◊ô◊ß◊ï◊© ◊ë◊©◊ï◊ß.'
      }
    ];

    for (const page of careerOrientationPages) {
      const existing = await client.query(
        'SELECT id FROM career_orientation_pages WHERE locale = $1 LIMIT 1',
        [page.locale]
      );
      
      if (existing.rows.length > 0) {
        await client.query(`
          UPDATE career_orientation_pages 
          SET title = $2, subtitle = $3, description = $4, 
              hero_title = $5, hero_subtitle = $6, hero_description = $7,
              updated_at = NOW()
          WHERE locale = $1
        `, [page.locale, page.title, page.subtitle, page.description, page.heroTitle, page.heroSubtitle, page.heroDescription]);
        console.log(`  ‚úÖ Updated ${page.locale} career orientation page`);
      } else {
        await client.query(`
          INSERT INTO career_orientation_pages (locale, title, subtitle, description, hero_title, hero_subtitle, hero_description, published_at)
          VALUES ($1, $2, $3, $4, $5, $6, $7, NOW())
        `, [page.locale, page.title, page.subtitle, page.description, page.heroTitle, page.heroSubtitle, page.heroDescription]);
        console.log(`  ‚úÖ Created ${page.locale} career orientation page`);
      }
    }

    // 4. Seed Career Center Pages
    console.log('üè¢ Seeding Career Center Pages...');
    const careerCenterPages = [
      {
        locale: 'en',
        title: 'Career Center',
        subtitle: 'Your Gateway to Tech Careers',
        description: 'Access exclusive job opportunities, career resources, and professional development tools to accelerate your tech career.',
        heroTitle: 'Your Tech Career Hub',
        heroSubtitle: 'Connect with Top Tech Opportunities',
        heroDescription: 'Browse curated job opportunities, access exclusive career resources, and connect with industry mentors to accelerate your tech career.'
      },
      {
        locale: 'ru',
        title: '–¶–µ–Ω—Ç—Ä –∫–∞—Ä—å–µ—Ä—ã',
        subtitle: '–í–∞—à –ø—É—Ç—å –∫ –∫–∞—Ä—å–µ—Ä–µ –≤ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö',
        description: '–ü–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º –≤–∞–∫–∞–Ω—Å–∏—è–º, –∫–∞—Ä—å–µ—Ä–Ω—ã–º —Ä–µ—Å—É—Ä—Å–∞–º –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –≤–∞—à–µ–π –∫–∞—Ä—å–µ—Ä—ã –≤ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö.',
        heroTitle: '–í–∞—à —Ü–µ–Ω—Ç—Ä —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∫–∞—Ä—å–µ—Ä—ã',
        heroSubtitle: '–°–≤—è–∑—å —Å –ª—É—á—à–∏–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –≤ IT',
        heroDescription: '–ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –æ—Ç–æ–±—Ä–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏, –ø–æ–ª—É—á–∞–π—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º –∫–∞—Ä—å–µ—Ä–Ω—ã–º —Ä–µ—Å—É—Ä—Å–∞–º –∏ –æ–±—â–∞–π—Ç–µ—Å—å —Å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞–º–∏ –∏–∑ –∏–Ω–¥—É—Å—Ç—Ä–∏–∏.'
      },
      {
        locale: 'he',
        title: '◊û◊®◊õ◊ñ ◊ß◊®◊ô◊ô◊®◊î',
        subtitle: '◊î◊©◊¢◊® ◊©◊ú◊ö ◊ú◊ß◊®◊ô◊ô◊®◊î ◊ë◊ò◊õ◊†◊ï◊ú◊ï◊í◊ô◊î',
        description: '◊ß◊ë◊ú ◊í◊ô◊©◊î ◊ú◊î◊ñ◊ì◊û◊†◊ï◊ô◊ï◊™ ◊¢◊ë◊ï◊ì◊î ◊ë◊ú◊¢◊ì◊ô◊ï◊™, ◊û◊©◊ê◊ë◊ô ◊ß◊®◊ô◊ô◊®◊î ◊ï◊õ◊ú◊ô ◊§◊ô◊™◊ï◊ó ◊û◊ß◊¶◊ï◊¢◊ô ◊õ◊ì◊ô ◊ú◊î◊ê◊ô◊• ◊ê◊™ ◊î◊ß◊®◊ô◊ô◊®◊î ◊©◊ú◊ö ◊ë◊ò◊õ◊†◊ï◊ú◊ï◊í◊ô◊î.',
        heroTitle: '◊û◊®◊õ◊ñ ◊î◊ß◊®◊ô◊ô◊®◊î ◊î◊ò◊õ◊†◊ï◊ú◊ï◊í◊ô ◊©◊ú◊ö',
        heroSubtitle: '◊î◊™◊ó◊ë◊® ◊ú◊î◊ñ◊ì◊û◊†◊ï◊ô◊ï◊™ ◊î◊û◊ï◊ë◊ô◊ú◊ï◊™ ◊ë◊î◊ô◊ô◊ò◊ß',
        heroDescription: '◊¢◊ô◊ô◊ü ◊ë◊î◊ñ◊ì◊û◊†◊ï◊ô◊ï◊™ ◊¢◊ë◊ï◊ì◊î ◊û◊ï◊ë◊ó◊®◊ï◊™, ◊ß◊ë◊ú ◊í◊ô◊©◊î ◊ú◊û◊©◊ê◊ë◊ô ◊ß◊®◊ô◊ô◊®◊î ◊ë◊ú◊¢◊ì◊ô◊ô◊ù ◊ï◊î◊™◊ó◊ë◊® ◊¢◊ù ◊û◊†◊ò◊ï◊®◊ô◊ù ◊û◊î◊™◊¢◊©◊ô◊ô◊î.'
      }
    ];

    for (const page of careerCenterPages) {
      const existing = await client.query(
        'SELECT id FROM career_center_pages WHERE locale = $1 LIMIT 1',
        [page.locale]
      );
      
      if (existing.rows.length > 0) {
        await client.query(`
          UPDATE career_center_pages 
          SET title = $2, subtitle = $3, description = $4, 
              hero_title = $5, hero_subtitle = $6, hero_description = $7,
              updated_at = NOW()
          WHERE locale = $1
        `, [page.locale, page.title, page.subtitle, page.description, page.heroTitle, page.heroSubtitle, page.heroDescription]);
        console.log(`  ‚úÖ Updated ${page.locale} career center page`);
      } else {
        await client.query(`
          INSERT INTO career_center_pages (locale, title, subtitle, description, hero_title, hero_subtitle, hero_description, published_at)
          VALUES ($1, $2, $3, $4, $5, $6, $7, NOW())
        `, [page.locale, page.title, page.subtitle, page.description, page.heroTitle, page.heroSubtitle, page.heroDescription]);
        console.log(`  ‚úÖ Created ${page.locale} career center page`);
      }
    }

    // 5. Create indexes
    console.log('üîç Creating indexes...');
    await client.query('CREATE INDEX IF NOT EXISTS idx_career_orientation_pages_locale ON career_orientation_pages(locale)');
    await client.query('CREATE INDEX IF NOT EXISTS idx_career_center_pages_locale ON career_center_pages(locale)');

    // 6. Verify the data
    console.log('\nüìä Verifying data...');
    const orientationCount = await client.query('SELECT locale, COUNT(*) as count FROM career_orientation_pages GROUP BY locale');
    const centerCount = await client.query('SELECT locale, COUNT(*) as count FROM career_center_pages GROUP BY locale');
    
    console.log('Career Orientation Pages:', orientationCount.rows);
    console.log('Career Center Pages:', centerCount.rows);

    console.log('\n‚úÖ Career pages setup complete!');
    console.log('üìå You can now use the admin panel to manage career pages');
    console.log('üåê API endpoints available:');
    console.log('   - GET /api/career-orientation-page');
    console.log('   - PUT /api/career-orientation-page');
    console.log('   - GET /api/career-center-page');
    console.log('   - PUT /api/career-center-page');

  } catch (error) {
    console.error('‚ùå Error:', error);
    process.exit(1);
  } finally {
    await client.end();
  }
}

// Run if called directly
if (require.main === module) {
  setupCareerPages();
}

module.exports = { setupCareerPages };