const { chromium } = require('playwright');

(async () => {
  console.log('üöÄ PLAYWRIGHT RUSSIAN TRANSLATION VERIFICATION');
  console.log('='.repeat(60));
  
  const browser = await chromium.launch({ headless: true });
  const context = await browser.newContext();
  const page = await context.newPage();
  
  // Test pages
  const pages = [
    { name: 'Homepage', url: 'https://www.aistudio555.com/ru/home.html' },
    { name: 'Courses', url: 'https://www.aistudio555.com/ru/courses.html' },
    { name: 'Teachers', url: 'https://www.aistudio555.com/ru/teachers.html' },
    { name: 'Career Center', url: 'https://www.aistudio555.com/ru/career-center.html' },
    { name: 'Blog', url: 'https://www.aistudio555.com/ru/blog.html' }
  ];
  
  // Expected Russian translations
  const expectedTranslations = {
    'nav a[href*="home"]': ['–ì–ª–∞–≤–Ω–∞—è', 'Home'],
    'nav a[href*="courses"]': ['–ö—É—Ä—Å—ã', 'Courses'],
    'nav a[href*="teachers"]': ['–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏', 'Teachers'],
    'nav a[href*="blog"]': ['–ë–ª–æ–≥', 'Blog'],
    'nav a[href*="career"]': ['–ö–∞—Ä—å–µ—Ä–Ω—ã–π —Ü–µ–Ω—Ç—Ä', 'Career Center'],
    '.button-primary, .btn-primary, a.button': ['–ó–∞–ø–∏—Å–∞—Ç—å—Å—è —Å–µ–≥–æ–¥–Ω—è', '–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ', '–ù–∞—á–∞—Ç—å', 'Sign Up Today', 'Learn More', 'Get Started'],
  };
  
  for (const testPage of pages) {
    console.log(`\nüìÑ Testing: ${testPage.name}`);
    console.log(`   URL: ${testPage.url}`);
    
    try {
      await page.goto(testPage.url, { waitUntil: 'networkidle', timeout: 30000 });
      
      // Wait for potential translations to load
      await page.waitForTimeout(2000);
      
      // Check navigation items
      console.log('   Navigation:');
      const navTexts = await page.evaluate(() => {
        const navItems = document.querySelectorAll('nav a, .nav-link, .navigation a');
        return Array.from(navItems).map(el => el.textContent.trim()).filter(t => t.length > 0);
      });
      
      const hasRussianNav = navTexts.some(text => 
        ['–ì–ª–∞–≤–Ω–∞—è', '–ö—É—Ä—Å—ã', '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏', '–ë–ª–æ–≥', '–ö–∞—Ä—å–µ—Ä–Ω—ã–π —Ü–µ–Ω—Ç—Ä', '–û –Ω–∞—Å', '–ö–æ–Ω—Ç–∞–∫—Ç—ã'].includes(text)
      );
      
      console.log(`     ${hasRussianNav ? '‚úÖ' : '‚ùå'} Navigation: ${navTexts.slice(0, 5).join(', ')}${navTexts.length > 5 ? '...' : ''}`);
      
      // Check buttons
      console.log('   Buttons:');
      const buttonTexts = await page.evaluate(() => {
        const buttons = document.querySelectorAll('button, .button, .btn, a.button-primary, [class*="button"]');
        return Array.from(buttons).map(el => el.textContent.trim()).filter(t => t.length > 0 && t.length < 50);
      });
      
      const hasRussianButtons = buttonTexts.some(text => 
        ['–ó–∞–ø–∏—Å–∞—Ç—å—Å—è —Å–µ–≥–æ–¥–Ω—è', '–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ', '–ù–∞—á–∞—Ç—å', '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∫—É—Ä—Å—ã', '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è —Å–µ–π—á–∞—Å'].includes(text)
      );
      
      console.log(`     ${hasRussianButtons ? '‚úÖ' : '‚ùå'} Buttons: ${buttonTexts.slice(0, 3).join(', ')}${buttonTexts.length > 3 ? '...' : ''}`);
      
      // Check form labels if present
      const formLabels = await page.evaluate(() => {
        const labels = document.querySelectorAll('label, .form-label, [class*="label"]');
        return Array.from(labels).map(el => el.textContent.trim()).filter(t => t.length > 0 && t.length < 30);
      });
      
      if (formLabels.length > 0) {
        const hasRussianForms = formLabels.some(text => 
          ['–ò–º—è', '–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞', '–¢–µ–ª–µ—Ñ–æ–Ω', '–°–æ–æ–±—â–µ–Ω–∏–µ', 'Email'].includes(text)
        );
        console.log(`     ${hasRussianForms ? '‚úÖ' : '‚ùå'} Forms: ${formLabels.slice(0, 3).join(', ')}${formLabels.length > 3 ? '...' : ''}`);
      }
      
      // Check page title
      const pageTitle = await page.title();
      console.log(`   Page Title: ${pageTitle}`);
      
      // Take screenshot for evidence
      await page.screenshot({ 
        path: `russian-test-${testPage.name.toLowerCase().replace(' ', '-')}.png`,
        fullPage: false 
      });
      
    } catch (error) {
      console.log(`   ‚ùå Error: ${error.message}`);
    }
  }
  
  console.log('\n' + '='.repeat(60));
  console.log('üìä SUMMARY');
  console.log('Screenshots saved for manual verification');
  console.log('Check the .png files to visually confirm Russian translations');
  
  await browser.close();
})();